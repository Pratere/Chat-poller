{"version":3,"sources":["../src/commands.js"],"names":["_","require","followersonly","channel","minutes","get","_sendCommand","_getPromiseDelay","resolve","reject","once","err","followersonlyoff","part","r9kbeta","r9kbetaoff","slow","seconds","slowoff","module","exports","action","message","_sendMessage","ban","username","reason","clear","color","newColor","commercial","emoteonly","emoteonlyoff","followersmode","followersmodeoff","host","target","remaining","join","mod","mods","forEach","moderators","indexOf","push","leave","ping","latency","Date","pingTimeout","setTimeout","ws","wasCloseCalled","log","error","close","clearInterval","pingLoop","clearTimeout","opts","connection","timeout","parseFloat","r9kmode","r9kmodeoff","raw","say","startsWith","substr","slowmode","slowmodeoff","subscribers","subscribersoff","isNull","isInteger","unban","unhost","unmod","whisper","getUsername","Promise","from","userstate","merge","globaluserstate","emits"],"mappings":"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","file":"commands.js","sourcesContent":["const _ = require('./utils');\n\n// Enable followers-only mode on a channel..\nfunction followersonly(channel, minutes) {\n  channel = _.channel(channel);\n  minutes = _.get(minutes, 30);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, `/followers ${minutes}`, (resolve, reject) => {\n    // Received _promiseFollowers event, resolve or reject..\n    this.once('_promiseFollowers', (err) => {\n      if (!err) { resolve([channel, ~~minutes]); } else { reject(err); }\n    });\n  });\n}\n\n// Disable followers-only mode on a channel..\nfunction followersonlyoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, '/followersoff', (resolve, reject) => {\n    // Received _promiseFollowersoff event, resolve or reject..\n    this.once('_promiseFollowersoff', (err) => {\n      if (!err) { resolve([channel]); } else { reject(err); }\n    });\n  });\n}\n\n// Leave a channel..\nfunction part(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), null, `PART ${channel}`, (resolve, reject) => {\n    // Received _promisePart event, resolve or reject..\n    this.once('_promisePart', (err) => {\n      if (!err) { resolve([channel]); } else { reject(err); }\n    });\n  });\n}\n\n// Enable R9KBeta mode on a channel..\nfunction r9kbeta(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, '/r9kbeta', (resolve, reject) => {\n    // Received _promiseR9kbeta event, resolve or reject..\n    this.once('_promiseR9kbeta', (err) => {\n      if (!err) { resolve([channel]); } else { reject(err); }\n    });\n  });\n}\n\n// Disable R9KBeta mode on a channel..\nfunction r9kbetaoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, '/r9kbetaoff', (resolve, reject) => {\n    // Received _promiseR9kbetaoff event, resolve or reject..\n    this.once('_promiseR9kbetaoff', (err) => {\n      if (!err) { resolve([channel]); } else { reject(err); }\n    });\n  });\n}\n\n// Enable slow mode on a channel..\nfunction slow(channel, seconds) {\n  channel = _.channel(channel);\n  seconds = _.get(seconds, 300);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, `/slow ${seconds}`, (resolve, reject) => {\n    // Received _promiseSlow event, resolve or reject..\n    this.once('_promiseSlow', (err) => {\n      if (!err) { resolve([channel, ~~seconds]); } else { reject(err); }\n    });\n  });\n}\n\n// Disable slow mode on a channel..\nfunction slowoff(channel) {\n  channel = _.channel(channel);\n\n  // Send the command to the server and race the Promise against a delay..\n  return this._sendCommand(this._getPromiseDelay(), channel, '/slowoff', (resolve, reject) => {\n    // Received _promiseSlowoff event, resolve or reject..\n    this.once('_promiseSlowoff', (err) => {\n      if (!err) { resolve([channel]); } else { reject(err); }\n    });\n  });\n}\n\nmodule.exports = {\n  // Send action message (/me <message>) on a channel..\n  action: function action(channel, message) {\n    channel = _.channel(channel);\n    message = `\\u0001ACTION ${message}\\u0001`;\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve) => {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n\n  // Ban username on channel..\n  ban: function ban(channel, username, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n    reason = _.get(reason, '');\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/ban ${username} ${reason}`, (resolve, reject) => {\n      // Received _promiseBan event, resolve or reject..\n      this.once('_promiseBan', (err) => {\n        if (!err) { resolve([channel, username, reason]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Clear all messages on a channel..\n  clear: function clear(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/clear', (resolve, reject) => {\n      // Received _promiseClear event, resolve or reject..\n      this.once('_promiseClear', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Change the color of your username..\n  color: function color(channel, newColor) {\n    newColor = _.get(newColor, channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), '#tmijs', `/color ${newColor}`, (resolve, reject) => {\n      // Received _promiseColor event, resolve or reject..\n      this.once('_promiseColor', (err) => {\n        if (!err) { resolve([newColor]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Run commercial on a channel for X seconds..\n  commercial: function commercial(channel, seconds) {\n    channel = _.channel(channel);\n    seconds = _.get(seconds, 30);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/commercial ${seconds}`, (resolve, reject) => {\n      // Received _promiseCommercial event, resolve or reject..\n      this.once('_promiseCommercial', (err) => {\n        if (!err) { resolve([channel, ~~seconds]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Enable emote-only mode on a channel..\n  emoteonly: function emoteonly(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/emoteonly', (resolve, reject) => {\n      // Received _promiseEmoteonly event, resolve or reject..\n      this.once('_promiseEmoteonly', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Disable emote-only mode on a channel..\n  emoteonlyoff: function emoteonlyoff(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/emoteonlyoff', (resolve, reject) => {\n      // Received _promiseEmoteonlyoff event, resolve or reject..\n      this.once('_promiseEmoteonlyoff', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Enable followers-only mode on a channel..\n  followersonly,\n\n  // Alias for followersonly()..\n  followersmode: followersonly,\n\n  // Disable followers-only mode on a channel..\n  followersonlyoff,\n\n  // Alias for followersonlyoff()..\n  followersmodeoff: followersonlyoff,\n\n  // Host a channel..\n  host: function host(channel, target) {\n    channel = _.channel(channel);\n    target = _.username(target);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(2000, channel, `/host ${target}`, (resolve, reject) => {\n      // Received _promiseHost event, resolve or reject..\n      this.once('_promiseHost', (err, remaining) => {\n        if (!err) { resolve([channel, target, ~~remaining]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Join a channel..\n  join: function join(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, `JOIN ${channel}`, (resolve, reject) => {\n      // Received _promiseJoin event, resolve or reject..\n      this.once('_promiseJoin', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Mod username on channel..\n  mod: function mod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/mod ${username}`, (resolve, reject) => {\n      // Received _promiseMod event, resolve or reject..\n      this.once('_promiseMod', (err) => {\n        if (!err) { resolve([channel, username]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Get list of mods on a channel..\n  mods(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/mods', (resolve, reject) => {\n      // Received _promiseMods event, resolve or reject..\n      this.once('_promiseMods', (err, mods) => {\n        if (!err) {\n          // Update the internal list of moderators..\n          mods.forEach((username) => {\n            if (!this.moderators[channel]) { this.moderators[channel] = []; }\n            if (this.moderators[channel].indexOf(username) < 0) {\n              this.moderators[channel].push(username);\n            }\n          });\n          resolve(mods);\n        } else { reject(err); }\n      });\n    });\n  },\n\n  // Leave a channel..\n  part,\n\n  // Alias for part()..\n  leave: part,\n\n  // Send a ping to the server..\n  ping: function ping() {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, 'PING', (resolve) => {\n      // Update the internal ping timeout check interval..\n      this.latency = new Date();\n      this.pingTimeout = setTimeout(() => {\n        if (this.ws !== null) {\n          this.wasCloseCalled = false;\n          this.log.error('Ping timeout.');\n          this.ws.close();\n\n          clearInterval(this.pingLoop);\n          clearTimeout(this.pingTimeout);\n        }\n      }, _.get(this.opts.connection.timeout, 9999));\n\n      // Received _promisePing event, resolve or reject..\n      this.once('_promisePing', (latency) => { resolve([parseFloat(latency)]); });\n    });\n  },\n\n  // Enable R9KBeta mode on a channel..\n  r9kbeta,\n\n  // Alias for r9kbeta()..\n  r9kmode: r9kbeta,\n\n  // Disable R9KBeta mode on a channel..\n  r9kbetaoff,\n\n  // Alias for r9kbetaoff()..\n  r9kmodeoff: r9kbetaoff,\n\n  // Send a raw message to the server..\n  raw: function raw(message) {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, message, (resolve) => {\n      resolve([message]);\n    });\n  },\n\n  // Send a message on a channel..\n  say: function say(channel, message) {\n    channel = _.channel(channel);\n\n    if ((message.startsWith('.') && !message.startsWith('..')) || message.startsWith('/') || message.startsWith('\\\\')) {\n      // Check if the message is an action message..\n      if (message.substr(1, 3) === 'me ') {\n        return this.action(channel, message.substr(4));\n      }\n\n      // Send the command to the server and race the Promise against a delay..\n      return this._sendCommand(this._getPromiseDelay(), channel, message, (resolve) => {\n        // At this time, there is no possible way to detect if a message has\n        // been sent has been eaten by the server, so we can only resolve the\n        // Promise.\n        resolve([channel, message]);\n      });\n    }\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve) => {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n\n  // Enable slow mode on a channel..\n  slow,\n\n  // Alias for slow()..\n  slowmode: slow,\n\n  // Disable slow mode on a channel..\n  slowoff,\n\n  // Alias for slowoff()..\n  slowmodeoff: slowoff,\n\n  // Enable subscribers mode on a channel..\n  subscribers: function subscribers(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/subscribers', (resolve, reject) => {\n      // Received _promiseSubscribers event, resolve or reject..\n      this.once('_promiseSubscribers', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Disable subscribers mode on a channel..\n  subscribersoff: function subscribersoff(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, '/subscribersoff', (resolve, reject) => {\n      // Received _promiseSubscribersoff event, resolve or reject..\n      this.once('_promiseSubscribersoff', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Timeout username on channel for X seconds..\n  timeout: function timeout(channel, username, seconds, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    if (!_.isNull(seconds) && !_.isInteger(seconds)) {\n      reason = seconds;\n      seconds = 300;\n    }\n\n    seconds = _.get(seconds, 300);\n    reason = _.get(reason, '');\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/timeout ${username} ${seconds} ${reason}`, (resolve, reject) => {\n      // Received _promiseTimeout event, resolve or reject..\n      this.once('_promiseTimeout', (err) => {\n        if (!err) { resolve([channel, username, ~~seconds, reason]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Unban username on channel..\n  unban: function unban(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/unban ${username}`, (resolve, reject) => {\n      // Received _promiseUnban event, resolve or reject..\n      this.once('_promiseUnban', (err) => {\n        if (!err) { resolve([channel, username]); } else { reject(err); }\n      });\n    });\n  },\n\n  // End the current hosting..\n  unhost: function unhost(channel) {\n    channel = _.channel(channel);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(2000, channel, '/unhost', (resolve, reject) => {\n      // Received _promiseUnhost event, resolve or reject..\n      this.once('_promiseUnhost', (err) => {\n        if (!err) { resolve([channel]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Unmod username on channel..\n  unmod: function unmod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), channel, `/unmod ${username}`, (resolve, reject) => {\n      // Received _promiseUnmod event, resolve or reject..\n      this.once('_promiseUnmod', (err) => {\n        if (!err) { resolve([channel, username]); } else { reject(err); }\n      });\n    });\n  },\n\n  // Send an whisper message to a user..\n  whisper: function whisper(username, message) {\n    username = _.username(username);\n\n    // The server will not send a whisper to the account that sent it.\n    if (username === this.getUsername()) {\n      return Promise.reject('Cannot send a whisper to the same account.');\n    }\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), '#tmijs', `/w ${username} ${message}`, (resolve) => {\n      const from = _.channel(username);\n      const userstate = _.merge({\n        'message-type': 'whisper',\n        'message-id': null,\n        'thread-id': null,\n        username: this.getUsername(),\n      }, this.globaluserstate);\n\n      // Emit for both, whisper and message..\n      this.emits(['whisper', 'message'], [\n        [from, userstate, message, true],\n        [from, userstate, message, true],\n      ]);\n\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([username, message]);\n    });\n  },\n};\n"]}